install.packages("stringr")
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
library(stringr)
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "Christopher"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 * 365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
intro <- (paste0("Hello, my name is ", name, " and I'm ", age, " years old."))
return(intro)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is ", "Hey, I'm ", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value_to_double) {
value_to_double * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- (double(minutes_in_a_day))
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value_to_cube) {
value_to_cube * value_to_cube * value_to_cube
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c(
"Spirited Away", "UP", "The Theory of Everything", "Baby Driver",
"Harry Potter", "Me and Earl and The Dying Girl"
)
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1, 2, 3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[c(1, 2, 3, 5, 6)]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date("2018-06-08")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- (summer_break - today)
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
paste(make_introduction(name, age), "In", (birthday - today), "days I'll be", (age + 1))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("2019-01-20"))
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(x) {
gsub("[0-9]", "", x)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
courses <- c("INFO 201", "CSE 142")
remove_digits(courses)
days_to_break
shiny::runApp('Desktop/Info201/info201-final-project-group')
runApp('Desktop/Info201/info201-final-project-group')
library(dplyr)
library(plotly)
library(devtools)
library(shiny)
devtools::install_github("ropensci/plotly")
source("playlist_plot.R")
# Creates a font family to use
fonts <- list(
sans = "Helvetica",
mono = "Consolas",
`Times New Roman` = "DejaVu Serif"
)
# Creates a visual table using Spotify branding colors
# and the columns can be manually moved
createTable <- function(df, tableHeight = 50){
nms <- lapply(names(df), function(x){
return(paste0("<b>", x, "</b>"))
})
nms <- append(nms, "<b>Top #</b>", after = 0)
headerValues <- lapply(nms, function(x){return(list(x))})
# Cell Values
names(df) <- NULL
cellValues <- apply(df, 2, function(x){return(list(x))})
cellValues <- lapply(cellValues, function(x){return(unlist(x))})
cellValues <- append(cellValues, list(rownames(df)), after = 0)
# Create the list to pass to plot_ly()
header <- list(
values = headerValues,
# Formatting
line = list(color = "#b3b3b3"),
align = c("left", rep("center", ncol(df))),
font = list(color = "#1db954", size = 16),
fill = list(color = "#212121")
)
cells <- list(
values = cellValues,
# Formatting
line = list(color = '#b3b3b3'),
align = c('left', rep('right', ncol(df))),
font = list(color = c('#1db954', rep("#ffffff", ncol(df))), size = 12),
fill = list(color = c("#212121", rep("#303030", ncol(df)))),
height = tableHeight
)
p <- plot_ly(
type = "table",
header = header,
cells = cells,
width = 1200,
height = 1600) %>%
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
return(p)
}
p <- createTable(simp_name)
# Function for the second tab of website
source("alvin-analysis.R")
df <- read.csv("data/artist_df.csv", stringsAsFactors = FALSE)
shinyServer(function(input, output) {
output$text <- renderPrint({input$username})
output$plot <- renderPlotly({
data <- df %>%
filter(artist == input$artist) %>%
select(album_name, track_name, danceability, energy, liveness, valence)
return(custom_plot(data, input$x_var, input$y_var))
})
output$pop_plot <- renderPlotly({
data <- df %>%
filter(artist == input$artist) %>%
select(album_name, track_name, danceability, energy, liveness, valence,
track_popularity)
return(popularity_plot(data, input$pop_var))
})
output$playlist_table <- renderPlotly({
if(input$playlist_type == "dance") {
mood <- dance(input$username)
} else if (input$playlist_type == "chill"){
mood <- chill(input$username)
} else{
mood <- simp(input$username)
}
return(createTable(mood))
})
})
# ui.R
library(shiny)
library(plotly)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(shinythemes)
source("server.R")
source("playlist_plot.R")
source("alvin-analysis.R")
shinyUI(navbarPage(
theme = shinytheme("slate"),
"MÜD",
# Create a tab panel for your map
tabPanel(
"Playlist",
titlePanel("Custom Spotify MÜD Playlist"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
textInput("username",
label = h3("What is your Spotify Username?"),
value = "Username..."
)
,
radioButtons("playlist_type",
label = h3("What are you in the mood for?"),
choices = list(
"Dancing" = "dance",
"Chilling" = "chill",
"Simping" = "simp"
)
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput("playlist_table")
)
)
),
tabPanel(
"Artist",
titlePanel("Show trends in artists"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput("artist",
label = "Which artist?",
choices = unique(df$artist)
)
,
radioButtons("x_var",
label = h3("Choose the x-variable"),
choices = list(
"danceability", "energy",
"happiness" = "valence"
)
)
,
radioButtons("y_var",
label = h3("Choose the y-variable"),
choices = list(
"danceability", "energy",
"happiness" = "valence"
)
)
,
radioButtons("pop_var",
label = h3("Choose the variable"),
choices = list(
"danceability", "energy", "liveness",
"happiness" = "valence"
)
)
),
mainPanel(
plotlyOutput("plot"),
plotlyOutput("pop_plot")
)
)
)
))
runApp('Desktop/Info201/info201-final-project-group')
library(plotly)
install.packages(plotly)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
devtools::install_github("ropensci/plotly")
library(dplyr)
library(plotly)
library(devtools)
library(shiny)
#devtools::install_github("ropensci/plotly")
source("playlist_plot.R")
# Creates a font family to use
fonts <- list(
sans = "Helvetica",
mono = "Consolas",
`Times New Roman` = "DejaVu Serif"
)
# Creates a visual table using Spotify branding colors
# and the columns can be manually moved
createTable <- function(df, tableHeight = 50){
nms <- lapply(names(df), function(x){
return(paste0("<b>", x, "</b>"))
})
nms <- append(nms, "<b>Top #</b>", after = 0)
headerValues <- lapply(nms, function(x){return(list(x))})
# Cell Values
names(df) <- NULL
cellValues <- apply(df, 2, function(x){return(list(x))})
cellValues <- lapply(cellValues, function(x){return(unlist(x))})
cellValues <- append(cellValues, list(rownames(df)), after = 0)
# Create the list to pass to plot_ly()
header <- list(
values = headerValues,
# Formatting
line = list(color = "#b3b3b3"),
align = c("left", rep("center", ncol(df))),
font = list(color = "#1db954", size = 16),
fill = list(color = "#212121")
)
cells <- list(
values = cellValues,
# Formatting
line = list(color = '#b3b3b3'),
align = c('left', rep('right', ncol(df))),
font = list(color = c('#1db954', rep("#ffffff", ncol(df))), size = 12),
fill = list(color = c("#212121", rep("#303030", ncol(df)))),
height = tableHeight
)
p <- plot_ly(
type = "table",
header = header,
cells = cells,
width = 1200,
height = 1600) %>%
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
return(p)
}
p <- createTable(simp_name)
# Function for the second tab of website
source("alvin-analysis.R")
df <- read.csv("data/artist_df.csv", stringsAsFactors = FALSE)
shinyServer(function(input, output) {
output$text <- renderPrint({input$username})
output$plot <- renderPlotly({
data <- df %>%
filter(artist == input$artist) %>%
select(album_name, track_name, danceability, energy, liveness, valence)
return(custom_plot(data, input$x_var, input$y_var))
})
output$pop_plot <- renderPlotly({
data <- df %>%
filter(artist == input$artist) %>%
select(album_name, track_name, danceability, energy, liveness, valence,
track_popularity)
return(popularity_plot(data, input$pop_var))
})
output$playlist_table <- renderPlotly({
if(input$playlist_type == "dance") {
mood <- dance(input$username)
} else if (input$playlist_type == "chill"){
mood <- chill(input$username)
} else{
mood <- simp(input$username)
}
return(createTable(mood))
})
})
setwd("~/Desktop/Info201/info201-final-project-group")
library(dplyr)
library(plotly)
library(devtools)
library(shiny)
#devtools::install_github("ropensci/plotly")
source("playlist_plot.R")
# Creates a font family to use
fonts <- list(
sans = "Helvetica",
mono = "Consolas",
`Times New Roman` = "DejaVu Serif"
)
# Creates a visual table using Spotify branding colors
# and the columns can be manually moved
createTable <- function(df, tableHeight = 50){
nms <- lapply(names(df), function(x){
return(paste0("<b>", x, "</b>"))
})
nms <- append(nms, "<b>Top #</b>", after = 0)
headerValues <- lapply(nms, function(x){return(list(x))})
# Cell Values
names(df) <- NULL
cellValues <- apply(df, 2, function(x){return(list(x))})
cellValues <- lapply(cellValues, function(x){return(unlist(x))})
cellValues <- append(cellValues, list(rownames(df)), after = 0)
# Create the list to pass to plot_ly()
header <- list(
values = headerValues,
# Formatting
line = list(color = "#b3b3b3"),
align = c("left", rep("center", ncol(df))),
font = list(color = "#1db954", size = 16),
fill = list(color = "#212121")
)
cells <- list(
values = cellValues,
# Formatting
line = list(color = '#b3b3b3'),
align = c('left', rep('right', ncol(df))),
font = list(color = c('#1db954', rep("#ffffff", ncol(df))), size = 12),
fill = list(color = c("#212121", rep("#303030", ncol(df)))),
height = tableHeight
)
p <- plot_ly(
type = "table",
header = header,
cells = cells,
width = 1200,
height = 1600) %>%
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
return(p)
}
p <- createTable(simp_name)
# Function for the second tab of website
source("alvin-analysis.R")
df <- read.csv("data/artist_df.csv", stringsAsFactors = FALSE)
shinyServer(function(input, output) {
output$text <- renderPrint({input$username})
output$plot <- renderPlotly({
data <- df %>%
filter(artist == input$artist) %>%
select(album_name, track_name, danceability, energy, liveness, valence)
return(custom_plot(data, input$x_var, input$y_var))
})
output$pop_plot <- renderPlotly({
data <- df %>%
filter(artist == input$artist) %>%
select(album_name, track_name, danceability, energy, liveness, valence,
track_popularity)
return(popularity_plot(data, input$pop_var))
})
output$playlist_table <- renderPlotly({
if(input$playlist_type == "dance") {
mood <- dance(input$username)
} else if (input$playlist_type == "chill"){
mood <- chill(input$username)
} else{
mood <- simp(input$username)
}
return(createTable(mood))
})
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(get_user_audio_features("mrlaw98"))
f <- list(
family = "Courier New, monospace",
size = 18,
color = "#FFFFFF"
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
